// @file
// Custom sass mixins
//
// Define the custom mixins for your project here.
// http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#defining_a_mixin

// Makes an element visually hidden, but accessible.
// @see http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
@mixin element-invisible {
  position: absolute !important;
  height: 1px;
  width: 1px;
  overflow: hidden;
  @if $legacy-support-for-ie6 or $legacy-support-for-ie7 {
    clip: rect(1px 1px 1px 1px); // IE6 and IE7 use the wrong syntax.
  }
  clip: rect(1px, 1px, 1px, 1px);
}

// Turns off the element-invisible effect.
@mixin element-invisible-off {
  position: static !important;
  clip: auto;
  height: auto;
  width: auto;
  overflow: auto;
}

// Makes an element visually hidden by default, but visible when focused.
@mixin element-focusable {
  @include element-invisible;

  &:active,
  &:focus {
    @include element-invisible-off;
  }
}

@mixin response-panel-5col {
  $zen-column-count: 5; /* Use 5 grid columns for larger screens. */
  .panel-3col-resp {
    .panel-col-content { /* Span 3 columns, starting in 1st column from left. */
      @include zen-grid-item(3, 1);
    }
    .panel-col-sidebar-first { /* Span 1 column, starting in 4th column from left. */
      @include zen-grid-item(1, 4);
    }
    .panel-col-sidebar-second { /* Span 1 column, starting in 5th column from left. */
      @include zen-grid-item(1, 5);
    }    
  }
  .panel-2col-resp {
    .panel-col-content { /* Span 3 columns, starting in 1st column from left. */
      @include zen-grid-item(3, 1);
    }
    .panel-col-sidebar-first { /* Span 2 column, starting in 4th column from left. */
      @include zen-grid-item(2, 4);  
    }
  }
}
